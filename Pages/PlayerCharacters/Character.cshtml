@page "{id}"
@model DnD_Manager.Pages.PlayerCharacters.CharacterModel
@{
  ViewData["Title"] = Model.Character.Name;
}

<div class="container">
  
  <div class="row d-flex align-items-stretch">

    <div class="col-lg-9 mb-3">
      <div class="card h-100">
        <div class="card-header">
          <div class="row">
            <div class="col-10 d-flex align-items-center">
              <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png" class="img-thumbnail me-3" style="width: 80px; height: 80px; object-fit: cover;" />
              <!-- **** Character Name and Class **** -->
              <div class="overflow-hidden">
                <h3 class="card-title text-nowrap text-truncate">@Model.Character.Name</h3>
                <h5 class="card-subtitle text-muted text-nowrap text-truncate">
                  @Model.Character.Race.Name
                  @foreach (var charClass in Model.Character.CharacterClasses)
                  {
                  @($" / {charClass.Class.Name} {charClass.Level}")
                  }
                </h5>
              </div>
            </div>
            <div class="col-2">
              <div class="btn-group dropstart float-end">
                <button type="button" class="btn btn-outline-secondary btn-sm border-0 rounded" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class="bi bi-gear-fill"></i>
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <a class="dropdown-item" asp-page="" asp-route-id="@Model.Character.Id">Level Up</a>
                  </li>
                  <li>
                    <a class="dropdown-item" asp-page="" asp-route-id="@Model.Character.Id">Edit Character</a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-lg-8">
              <!-- **** Hit Points **** -->
              <div class="row mb-3 align-items-center">
                <div class="col">
                  <div class="progress" style="height: 20px;">
                    @{
                      // Calculate the percentage of hit points remaining
                      var percentage = ((double)Model.Character.CurrentHitPoints / (Model.Character.HitPoints + Model.Character.TemporaryHitPoints)) * 100;
                      var tempPercentage = ((double)Model.Character.TemporaryHitPoints / (Model.Character.HitPoints + Model.Character.TemporaryHitPoints)) * 100;
                    }
                    <div class="progress-bar bg-danger" role="progressbar" style="width: @($"{percentage}%");" aria-valuenow=@percentage aria-valuemin="0" aria-valuemax="100">@Model.Character.CurrentHitPoints / @Model.Character.HitPoints</div>
                    <div class="progress-bar bg-info" role="progressbar" style="width: @($"{tempPercentage}%");" aria-valuenow=@tempPercentage aria-valuemin="0" aria-valuemax="100">@Model.Character.TemporaryHitPoints</div>
                  </div>
                </div>
              </div>
              <div class="row mb-3 align-items-center">
                <div class="col-7">
                  <!-- **** Rest and Conditions Button Group **** -->
                  <div class="btn-group w-100" role="group" aria-label="rest buttons">
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#RestModal"><!--<i class="bi bi-fire"></i>-->Rest</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#conditionsModal"><!--<i class="bi bi-bandaid-fill"></i>-->Conditions</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#defencesModal"><!--<i class="bi bi-shield-fill"></i>-->Defences</button>
                  </div>
                </div>
                <div class="col-5">
                  <form method="post" asp-route-id="@Model.Character.Id">
                    <div class="input-group">
                      <input type="number" class="form-control" min="0" asp-for="HealthAdj" onfocus="this.select()" />
                      <button type="submit" class="btn btn-outline-danger" asp-page-handler="Damage">Damage</button>
                      <button type="button" class="btn btn-outline-success dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false"></button>
                      <ul class="dropdown-menu dropdown-menu-end">
                        <li><button type="submit" class="dropdown-item" asp-page-handler="Heal">Heal</button></li>
                        <li><button type="submit" class="dropdown-item" asp-page-handler="TempHP">Temp HP</button></li>
                      </ul>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-lg-4 flex-shrink-0">
              <div class="card w-100 overflow-auto" style="height: 6em;">
                <div class="card-body overflow-auto">
                  <ul class="list-group list-group-flush">
                    @if (Model.Character.ExhaustionLevel > 0)
                    {
                      <li class="list-group text-muted text-center">
                        Exhaustion Lvl: @Model.Character.ExhaustionLevel
                      </li>
                    }
                    @foreach (var condition in Model.Character.Conditions)
                    {
                    <li class="list-group text-muted text-center">
                        <a class="text-reset text-decoration-none" data-bs-toggle="offcanvas" href="#conditionOffCanvas_@condition.Id" role="button" aria-controls="conditionOffCanvas">@condition.Condition.Name</a>
                    </li>
                    <!-- **** Offcanvas for condition descriptions **** -->
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="conditionOffCanvas_@condition.Id" aria-labelledby="conditionOffCanvasLabel">
                      <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="conditionOffCanvasLabel">@condition.Condition.Name</h5>
                        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                      </div>
                      <div class="offcanvas-body">
                        <p class="text-muted">@condition.Condition.Description</p>
                      </div>
                    </div>
                    }
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- **** AC, Initiative, Speed, and Proficiency **** -->
    <div class="col-lg-3 mb-3">
      <div class="card text-center h-100">
        <div class="card-body">
          <div class="row">
            <div class="col-lg-6 col-3 mb-3">
              <div class="card text-center">
                <div class="card-header py-2">
                  <small class="card-subtitle mb-2 text-muted">AC</small>
                </div>
                <div class="card-body py-2 px-1">
                  <h4 class="card-subtitle mb-2 text-muted">@Model.ArmorClass</h4>
                </div>
              </div>
            </div>
            
            <div class="col-lg-6 col-3 mb-3">
              <div class="card text-center">
                <div class="card-header py-2">
                  <small class="card-subtitle mb-2 text-muted">Init</small>
                </div>
                <div class="card-body py-2 px-1">
                  <h4 class="card-subtitle mb-2 text-muted">@(Model.Initiative < 0 ? "" : "+")@Model.Initiative</h4>
                </div>
              </div>
            </div>

            <div class="col-lg-6 col-3 mb-3">
              <div class="card text-center">
                <div class="card-header py-2">
                  <small class="card-subtitle mb-2 text-muted">Speed</small>
                </div>
                <div class="card-body py-2 px-1">
                  <h4 class="card-subtitle mb-2 text-muted">@Model.Speed ft</h4>
                </div>
              </div>
            </div>

            <div class="col-lg-6 col-3 mb-3">
              <div class="card text-center">
                <div class="card-header py-2">
                  <small class="card-subtitle mb-2 text-muted">Prof</small>
                </div>
                <div class="card-body py-2 px-1">
                  <h4 class="card-subtitle mb-2 text-muted">+@Model.ProficiencyBonus</h4>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- **** Body Card **** -->
  <div class="card">
    <!-- **** Card Header with Nav Tabs **** -->
    <div class="card-header">
      <ul class="nav nav-tabs card-header-tabs" role="tablist">
        <li class="nav-item active">
          <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#abilities" role="tab">Abilities</button>
        </li>
        <li class="nav-item">
          <button class="nav-link disabled" data-bs-toggle="tab" data-bs-target="#actions" role="tab">Actions</button>
        </li>
        <li class="nav-item">
          <button class="nav-link disabled" data-bs-toggle="tab" data-bs-target="#inventory" role="tab">Inventory</button>
        </li>
        <li class="nav-item">
          <button class="nav-link disabled" data-bs-toggle="tab" data-bs-target="#features" role="tab">Features</button>
        </li>
        <li class="nav-item"></li>
          <button class="nav-link disabled" data-bs-toggle="tab" data-bs-target="#background" role="tab">Background</button>
        </li>
        <li class="nav-item"></li>
          <button class="nav-link disabled" data-bs-toggle="tab" data-bs-target="#notes" role="tab">Notes</button>
        </li>
      </ul>
    </div>
    <!-- **** Card Body with Tab Content **** -->
    <div class="card-body">
      <div class="tab-content">
        <div class="tab-pane fade show active" id="abilities" role="tabpanel">
          <div class="row">
            @foreach (var stat in Model.Character.Stats)
            {
              <div class="col-lg-2 col-4 mb-3">
                <div class="card text-center">
                  <div class="card-header">
                    <h6 class="card-subtitle mb-2 text-muted">@stat.Stat.Abbreviation.ToUpper()</h6>
                  </div>
                  <div class="card-body">
                    <h4 class="card-subtitle mb-2 text-muted">@(stat.Modifier >= 0 ? "+" : "")@stat.Modifier</h4>
                  </div>
                  <div class="card-footer">
                    <p class="card-text text-muted">@stat.Value</p>
                  </div>
                </div>
              </div>
            }
          </div>

          <div class="row">
            <div class="col-lg-4 col-md-6 mb-3">
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Skills</h5>
                </div>
                <div class="card-body">
                  <ul class="list-group list-group-flush">
                    <li class="list-group-item border-0 mb-0 text-muted small d-flex align-items-center">
                      <span style="flex:0 0 15%">Prof</span>
                      <span style="flex:0 0 15%">Mod</span>
                      <span style="flex:1 0 auto">Skill</span>
                      <span class="float-end" style="flex:0 0 10%">Bonus</span>
                    </li>
                    @foreach (var skill in Model.Character.Skills)
                    {
                      int statModifier = Model.Character.Stats.Single(stat => stat.Stat.Id == skill.Skill.StatId).Modifier + Model.ProficiencyBonus * skill.Proficiency;
                        <li class="list-group-item @(skill.Skill.Name == "Survival" ? "border-0": "") d-flex">
                          <span style="flex:0 0 15%">
                            @if (skill.Proficiency == 0)
                            {
                              <i class="bi bi-circle"></i>
                            }
                            else if (skill.Proficiency == 1)
                            {
                              <i class="bi bi-circle-fill"></i>
                            }
                            else if (skill.Proficiency == 2)
                            {
                              <i class="bi bi-record-circle-fill"></i>
                            }
                          </span>
                          <span class="text-muted small" style="flex:0 0 15%">@skill.Skill.Stat.Abbreviation</span>
                          <span class="small" style="flex:1 0 auto"><a class="text-reset text-decoration-none" data-bs-toggle="offcanvas" href="#skillOffCanvas_@skill.SkillId" role="button" aria-controls="skillOffCanvas">@skill.Skill.Name</a></span>
                        <span class="border border-secondary rounded text-center small" style="flex:0 0 10%">@(statModifier < 0 ? "" : "+")@statModifier</span>
                      </li>

                      <!-- **** Offcanvas for Skills **** -->
                      <div class="offcanvas offcanvas-end" tabindex="-1" id="skillOffCanvas_@skill.SkillId" aria-labelledby="skillOffCanvasLabel">
                        <div class="offcanvas-header">
                          <h5 class="offcanvas-title" id="skillOffCanvasLabel">@skill.Skill.Name</h5>
                        </div>
                        <div class="offcanvas-body">
                          <!-- **** Skill details content goes here **** -->
                          <p>@skill.Skill.Description</p>
                        </div>
                      </div>
                    }
                  </ul>
                </div>
              </div>
            </div>

            <div class="col">
              <div class="row mb-3">
                <div class="col">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="card-title">Saving Throws</h5>
                    </div>
                    <div class="card-body">
                      <div class="row">

                        <!-- **** Saving Throws **** -->
                        @foreach (var stat in Model.Character.Stats)
                        {

                          int profMultiplier = (Model.ProficientSaves.Contains(stat.Stat.Name) ? 1 : 0);
                          
                          <div class="col-lg-2 col-4 mb-3">
                            <div class="card text-center">
                              <div class="card-header">
                                <h6 class="card-subtitle mb-2 text-muted">@stat.Stat.Abbreviation.ToUpper()</h6>
                              </div>
                              <div class="card-body">
                                <h4 class="card-subtitle mb-2 text-muted">@(stat.Modifier >= 0 ? "+" : "")@(stat.Modifier + Model.ProficiencyBonus * profMultiplier) </h4>
                              </div>
                            </div>
                          </div>
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="row d-flex align-items-stretch">
                <div class="col-lg-6 mb-3">
                  <div class="card h-100">
                    <div class="card-header">
                      <h5 class="card-title">Passive Senses</h5>
                    </div>
                    <div class="card-body">
                      @{
                        var wis = Model.Character.Stats.First(s => s.Stat.Abbreviation == "Wis");
                        var intStat = Model.Character.Stats.First(s => s.Stat.Abbreviation == "Int");

                        var perception = Model.Character.Skills.First(s => s.Skill.Name == "Perception");
                        var investigation = Model.Character.Skills.First(s => s.Skill.Name == "Investigation");
                        var insight = Model.Character.Skills.First(s => s.Skill.Name == "Insight");
                      }
                      <div class="card mb-3 overflow-hidden">
                        <div class="row g-0">
                          <div class="col-3 bg-body-secondary">
                            <div class="card-body text-center">
                              <h5 class="card-title">
                                @(wis.Modifier + 10 + Model.ProficiencyBonus * perception.Proficiency)
                              </h5>
                            </div>
                          </div>
                          <div class="col">
                            <div class="card-body">
                              <h5 class="card-title text-muted">Perception</h5>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div class="card mb-3 overflow-hidden">
                        <div class="row g-0">
                          <div class="col-3 bg-body-secondary">
                            <div class="card-body text-center">
                              <h5 class="card-title">
                                @(intStat.Modifier + 10 + Model.ProficiencyBonus * investigation.Proficiency)
                              </h5>
                            </div>
                          </div>
                          <div class="col">
                            <div class="card-body">
                              <h5 class="card-title text-muted">Investigation</h5>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="card mb-3 overflow-hidden">
                        <div class="row g-0">
                          <div class="col-3 bg-body-secondary">
                            <div class="card-body text-center">
                              <h5 class="card-title">
                                @(wis.Modifier + 10 + Model.ProficiencyBonus * insight.Proficiency)
                              </h5>
                            </div>
                          </div>
                          <div class="col">
                            <div class="card-body">
                              <h5 class="card-title text-muted">Insight</h5>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                </div>

                <div class="col-lg-6 mb-3">
                  <div class="card h-100">
                    <div class="card-header">
                      <h5 class="card-title">Proficiencies &amp; Training</h5>
                    </div>
                    <div class="card-body">

                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  </div>
</div>





<!-- **** Modal for Rest Actions **** -->
<div class="modal fade" id="RestModal" tabindex="-1" aria-labelledby="RestModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <ul class="nav nav-pills modal-header-pills">
          <li class="nav-item">
            <button class="nav-link active" id="shortRestTab" data-bs-toggle="pill" data-bs-target="#shortRestContent" type="button">Short Rest</button>
          </li>
          <li class="nav-item">
            <button class="nav-link" id="longRestTab" data-bs-toggle="pill" data-bs-target="#longRestContent" type="button">Long Rest</button>
          </li>
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- **** Conditions content **** -->
        <div class="tab-content">

          <!-- **** Short Rest Content **** -->
          <div class="tab-pane fade show active" id="shortRestContent">
            <p class="text-muted">
              A short rest is a period of downtime, at least 1 hour long, during which a character does nothing more strenuous than eating, drinking, reading, and tending to wounds.
            </p>
            <form method="post" id="shortRestForm" asp-page-handler="ShortRest" asp-route-id="@Model.Character.Id">
              @{
                int conMod = Model.Character.Stats.First(s => s.Stat.Abbreviation == "Con").Modifier;
                string symbol = conMod < 0 ? "" : "+";
              }
              <h5>Recover</h5>
              <ul class="list-group list-group-flush">
                @foreach (var charClass in Model.Character.CharacterClasses)
                {
                  <li class="list-group-item">
                    <h6>@charClass.Class.Name @($"(Hit Dice: {charClass.Level - charClass.UsedHitDice} d{charClass.Class.HitDie}{symbol}{conMod})")</h6>
                    
                    <div class="hit-dice-group" data-class="@charClass.Id">
                      <input type="hidden" name="init-hit-die-count" class="init-hit-die-count" value="@charClass.UsedHitDice" />
                      @for (int i = 0; i < charClass.Level; i++)
                      {
                        <div class="form-check form-check-inline me-0 ms-0">
                          <input class="form-check-input border border-dark" type="checkbox" id="@($"hitDie_{i}")" value="@i" checked="@(i < charClass.UsedHitDice)" autocomplete="off" />
                        </div>
                      }
                      <input type="hidden" name="UsedHitDiceCounts[@charClass.Id]" id="hitDiceCount_@charClass.Id" value="0" />
                    </div>
                  </li>
                }
              </ul>
              <button type="submit" class="btn btn-primary">Take Rest</button>
            </form>
          </div>

          <!-- **** Long Rest Content **** -->
          <div class="tab-pane fade" id="longRestContent">
            <p class="text-muted">
              A long rest is a period of extended downtime, at least 8 hours long, during which a character sleeps for at least 6 hours and performs no more than 2 hours of light activity, such as reading, talking, eating, or standing watch.
            </p>
            <p class="text-muted">
              If the rest is interrupted by a period of strenuous activity — at least 1 hour of walking, fighting, casting spells, or similar adventuring activity — the characters must begin the rest again to gain any benefit from it.
            </p>
            <form method="post" asp-page-handler="LongRest" asp-route-id="@Model.Character.Id">
              <button type="submit" class="btn btn-primary">Take Rest</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- **** Modal for Character Conditions List **** -->
<form id="conditionsForm" method="post" asp-page-handler="ToggleCondition" asp-route-id="@Model.Character.Id">
  <div class="modal fade" id="conditionsModal" tabindex="-1" aria-labelledby="conditionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="conditionsModalLabel">Conditions</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- **** Conditions content **** -->
          <ul class="list-group list-group-flush">
            @foreach (var condition in Model.AllConditions)
            {
              bool isChecked = Model.Character.Conditions.Any(c => c.ConditionId == condition.Id);
              <li class="list-group-item">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" name="SelectedConditionIds" value="@condition.Id" id="cond_@condition.Id" checked="@isChecked" />
                    <label class="form-check-label" for="cond_@condition.Id">@condition.Name</label>
                  </div>
              </li>
            }
          </ul>
        </div>
        <div class="modal-footer">
          <div class="w-100">
            <span class="text-muted float-start">Exhaustion: </span>
          </div>
          <div class="btn-group w-100" role="group" aria-label="exhaustion radio toggle button group">
            <input type="radio" class="btn-check" name="exhaustionLevel" id="exhaustion0" value="0" autocomplete="off" checked="@(Model.Character.ExhaustionLevel == 0)" />
            <label class="btn btn-outline-secondary" for="exhaustion0">--</label>
            @for (int i = 1; i <= 6; i++)
            {
              <input type="radio" class="btn-check" name="exhaustionLevel" id="@($"exhaustion{i}")" value="@i" autocomplete="off" checked="@(Model.Character.ExhaustionLevel == i)" />
              <label class="btn btn-outline-secondary" for="@($"exhaustion{i}")">@i</label>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</form>

<!-- **** Modal for Character Defences **** -->
<div class="modal fade" id="defencesModal" tabindex="-1" aria-labelledby="defencesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="defencesModalLabel">Defences</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="container">
          <div class="row d-flex align-items-stretch">
            <div class="col-lg-4 mb-3">
              <div class="card h-100">
                <!-- **** Resistances **** -->
                <div class="card-header">
                  <h6 class="card-subtitle mb-2 text-muted">Resistances</h6>
                </div>
                <div class="card-body">
                  <ul class="list-group list-group-flush">
                    @foreach (var resistance in Model.Resistances)
                    {
                      <li class="list-group">
                        <span>@resistance</span>
                      </li>
                    }
                  </ul>
                </div>
              </div>
            </div>
            <div class="col-lg-4 mb-3">
              <div class="card h-100">
                <!-- **** Immunities **** -->
                <div class="card-header">
                  <h6 class="card-subtitle mb-2 text-muted">Immunities</h6>
                </div>
                <div class="card-body">
                  <ul class="list-group list-group-flush">
                    @foreach (var immunity in Model.Immunities)
                    {
                      <li class="list-group">
                        <span>@immunity</span>
                      </li>
                    }
                  </ul>
                </div>
              </div>
            </div>
            <div class="col-lg-4 mb-3">
              <div class="card h-100">
                <!-- **** Vulnerabilities **** -->
                <div class="card-header">
                  <h6 class="card-subtitle mb-2 text-muted">Vulnerabilities</h6>
                </div>
                <div class="card-body">
                  <ul class="list-group list-group-flush">
                    @foreach (var vulnerability in Model.Vulnerabilities)
                    {
                      <li class="list-group">
                        <span>@vulnerability</span>
                      </li>
                    }
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>




@section Scripts
{
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      var conditionsModal = document.getElementById("conditionsModal");
      var form = document.getElementById("conditionsForm");
      if (!conditionsModal && !form) return;

      conditionsModal.addEventListener("hidden.bs.modal", function (event) {
        document.getElementById("conditionsForm").submit();
      });
    });

    document.getElementById("shortRestForm").addEventListener('submit', function (event) {
      document.querySelectorAll(".hit-dice-group").forEach(group => {
        var classId = group.dataset.class;
        var count = group.querySelectorAll("input:checked").length;
        document.getElementById(`hitDiceCount_${classId}`).value = count;
      });
    });

    document.querySelectorAll('.hit-dice-group').forEach(group => {
      group.addEventListener('click', function(e) {
        // only care about clicks on the checkboxes themselves
        if (!e.target.matches('input[type="checkbox"]')) return;

        // collect all the checkboxes in this group, in document order
        const boxes = Array.from(group.querySelectorAll('input[type="checkbox"]'));
        var checkedBoxesCount = boxes.filter(cb => cb.checked).length;
        const wasChecked = e.target.checked;

        // console.log(`${boxes.length} boxes, ${checkedBoxesCount} checked, wasChecked: ${wasChecked}`);
        
        // uncheck all boxes
        boxes.forEach(cb => cb.checked = false);

        // check boxes up to checkedBoxesCount
        for (let i = 0; i < checkedBoxesCount; i++) {
          boxes[i].checked = true;
        }
      });
    });

    document.addEventListener("DOMContentLoaded", function() {
      var RestModal = document.getElementById("RestModal");
      if (!RestModal) return;

      RestModal.addEventListener("hidden.bs.modal", function (event) {
        @* window.location.reload(); *@

        document.querySelectorAll('.hit-dice-group').forEach(group => {
          const boxes = Array.from(group.querySelectorAll('input[type="checkbox"]'));
          boxes.forEach(cb => cb.checked = false);
          var hidden = group.querySelector('input.init-hit-die-count');
          var UsedHitDiceCount = parseInt(hidden.value, 10) || 0;

          for (let i = 0; i < UsedHitDiceCount; i++) {
            boxes[i].checked = true;
          }
        });
      });
    });
    
  </script>
}